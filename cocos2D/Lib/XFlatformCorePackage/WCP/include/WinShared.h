#ifndef __WINTK_SHARED_API_H
#define __WINTK_SHARED_API_H

#include "Windows_lib_version.h"
#include "../src/WindowsCorePackage.Shared/SecureStorageManager/SecureStorageWrapper.h"
#include <functional>
#include <vector>

#if defined(WCP_DLL)
#define WINTK_EXPORTED __declspec(dllexport)
#else
#define WINTK_EXPORTED __declspec(dllimport)
#endif
//#define WINTK_IMPORTED 

/** @name WCPToolkit
*  windows toolkit utility functions
*/
///@{
namespace WCPToolkit
{

	namespace Utils
	{
		// Utils
		//////////////////////////////////////////////////////////////////////////
		/// @name Utils
		//////////////////////////////////////////////////////////////////////////
		///@{
		/// @details string to wide string conversion
		/// @return returns the converted wide string
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::wstring Str2Wstr(const std::string& str);
		//////////////////////////////////////////////////////////////////////////
		/// @details wide string to string conversion
		/// @return returns the converted string
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string Wstr2Str(const std::wstring& wstr);
		//////////////////////////////////////////////////////////////////////////
		/// @details logs a message to the output console when compiled in debug
		/// @param message the message to be logged to console
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void Log(const std::wstring& message, bool lineReturn = true);
		//////////////////////////////////////////////////////////////////////////
		/// @details Platform string to wide string conversion
		/// @return returns the converted wide string
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void ExitApplication();
		//////////////////////////////////////////////////////////////////////////
		/// @details launches an operation on the UI thread
		/// @param func The code to be executed on the ui thread
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void RunOnUIThread(std::function<void()> func);

		//////////////////////////////////////////////////////////////////////////
		/// @details callback for when a key from virtual keyboard is pressed
		/// @param nKeycode code of the key pressed
		/// @return set return to true if you want the os not to handle the event
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED typedef bool(*VKOnKeyPressedCallback) (int nKeyCode);
		//////////////////////////////////////////////////////////////////////////
		/// @details callback for when the text from virtual keyboard has changed
		/// @param sNewText the new text from the virtual keyboard
		/// @return set return to true if you want the text to be changed with sNewText
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED typedef bool(*VKOnTextChangedCallback) (std::wstring sNewText);

		class VirtualKeyboard
		{
		public:
			WINTK_EXPORTED static VirtualKeyboard* GetInstance();
			//////////////////////////////////////////////////////////////////////////
			/// @details sets the callback for when a key from the virtual keyboard is pressed
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void RegisterVKOnKeyPressedCallback(Utils::VKOnKeyPressedCallback callback);
			//////////////////////////////////////////////////////////////////////////
			/// @details sets the callback for when the text from virtual keyboard has changed
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void RegisterVKOnTextChangedCallback(Utils::VKOnTextChangedCallback callback);
			//////////////////////////////////////////////////////////////////////////
			/// @details shows the virtual keyboard
			/// @param bTextBoxVisible set to true if you want the TextBox control associated with virtual keyboard to be visible
			/// @param sInitialText sets the initial text for virtual keyboard
			/// @param nMaxChars max chars that can be entered for virtual keyboard text
			/// @param nType type of virtual keyboard, see https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.input.inputscopenamevalue(v=win.10).aspx
			/// @param nLeft left position in pixels of the topleft corner of the TextBox control associated with virtual keyboard
			/// @param nTop top position in pixels of the topleft corner of the TextBox control associated with virtual keyboard
			/// @param nWidth width in pixels of the TextBox control associated with virtual keyboard
			/// @param nHeight height in pixels of the TextBox control associated with virtual keyboard
			/// @param nTextAlignment alignment of the text in the TextBox control associated with virtual keyboard, see https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.textalignment(v=win.10).aspx
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void Show(bool bTextBoxVisible, const std::wstring& sInitialText, int nMaxChars, int nType = 0, int nLeft = 0, int nTop = 0, int nWidth = 0, int nHeight = 0, int nTextAlignment = 0);
			//////////////////////////////////////////////////////////////////////////
			/// @details hides the virtual keyboard
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void Hide();
			//////////////////////////////////////////////////////////////////////////
			/// @return returns true if the virtual keyboard is visible, otherwise false
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED bool IsVisible();
			//////////////////////////////////////////////////////////////////////////
			/// @return returns the string from virtual keyboard
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED std::wstring GetString();

			bool OnKeyPressed(int nKeyCode);
			void OnTextChanged(std::wstring sNewText);
		private:
			static VirtualKeyboard* m_Instance;
			static std::wstring		m_sKeyboardString;
			static bool				m_bVisible;
			static VKOnKeyPressedCallback	m_pVKOnKeyPressedCallback;
			static VKOnTextChangedCallback m_pVKOnTextChangedCallback;

			VirtualKeyboard() {};

			VirtualKeyboard(VirtualKeyboard const&);
			void operator = (VirtualKeyboard const&);
		protected:
			~VirtualKeyboard();
		};
		///@}
	}

	namespace Controllers
	{
		// controllers
		//////////////////////////////////////////////////////////////////////////
		/// @name Controllers
		/// @details support for XBOX 360 (windows) and MOGA PRO (windows phone)
		/// @details GamePadRefresh have to be used in the update of the application
		/// @details In the callback function have to be the modifications related to the controller's state
		/// @note Windows Phone: Check ID_CAP_PROXIMITY option from Capabilities in the WMAppManifest.xml
		//////////////////////////////////////////////////////////////////////////
		///@{
		/// @details enum for controller events
		//////////////////////////////////////////////////////////////////////////
		enum ControllerEvents
		{
			UNDEFINED = 0,

			//////////////////////////////////////////////////////////////////////////
			/// will take continuous values between (0, 1) 
			//////////////////////////////////////////////////////////////////////////
			LeftTrigger = 1,
			//////////////////////////////////////////////////////////////////////////
			/// will take continuous values between (0, 1) 
			//////////////////////////////////////////////////////////////////////////
			RightTrigger = 2,
			//////////////////////////////////////////////////////////////////////////
			/// will take continuous values between (-1, 1)
			//////////////////////////////////////////////////////////////////////////
			LeftStickX = 3,
			//////////////////////////////////////////////////////////////////////////
			/// will take continuous values between (-1, 1)
			//////////////////////////////////////////////////////////////////////////
			LeftStickY = 4,
			//////////////////////////////////////////////////////////////////////////
			/// will take continuous values between (-1, 1)
			//////////////////////////////////////////////////////////////////////////
			RightStickX = 5,
			//////////////////////////////////////////////////////////////////////////
			/// will take continuous values between (-1, 1)
			//////////////////////////////////////////////////////////////////////////
			RightStickY = 6,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			DpadEventUp = 7,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			DpadEventDown = 8,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			DpadEventLeft = 9,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			DpadEventRight = 10,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			LeftBumper = 11,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			RightBumper = 12,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			ButtonY = 13,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			ButtonA = 14,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			ButtonX = 15,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			ButtonB = 16,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			ButtonStart = 17,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			ButtonSelect = 18,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			ButtonBack = 19,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			LeftStickButton = 20,
			//////////////////////////////////////////////////////////////////////////
			/// will take fixed values, 1 when pressed, 0 when released
			//////////////////////////////////////////////////////////////////////////
			RightStickButton = 21,
		};
		//////////////////////////////////////////////////////////////////////////
		/// structure used to compare triggered "events" when the controller's state changes
		//////////////////////////////////////////////////////////////////////////
		struct WCP_CONTROLLER_STATE
		{
			double wbsLeftTrigger;
			double wbsRightTrigger;
			double wbsLeftStickX;
			double wbsLeftStickY;
			double wbsRightStickX;
			double wbsRightStickY;
			double wbsDpadEventUp;
			double wbsDpadEventDown;
			double wbsDpadEventLeft;
			double wbsDpadEventRight;
			double wbsLeftBumper;
			double wbsRightBumper;
			double wbsButtonX;
			double wbsButtonY;
			double wbsButtonA;
			double wbsButtonB;
			double wbsButtonStart;
			double wbsButtonSelect;
			double wbsButtonBack;
			double wbsLeftStickButton;
			double wbsRightStickButton;
		};
		//////////////////////////////////////////////////////////////////////////
		/// @details definition of the controller callback function type
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED typedef void(*AppHidEventCallback) (ControllerEvents eventType, double Value);
		//////////////////////////////////////////////////////////////////////////
		/// @details function used internally for controller support, simulating events for the controllers callback function
		//////////////////////////////////////////////////////////////////////////
		bool GamePadCallback(AppHidEventCallback pHidEventCallback);
#if (WCP_TEST_SAMPLE == 1)
		//////////////////////////////////////////////////////////////////////////
		/// @details function used only for windows phone sample app
		/// @return returns the state of button A from controller: pressed/unpressed
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GamePadRefreshA();
#endif

		//////////////////////////////////////////////////////////////////////////
		/// @details adds a controller callback
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void RegisterEventCallback(AppHidEventCallback pHidEventCallback);
		//////////////////////////////////////////////////////////////////////////
		/// @details removes a controller callback
		/// @note you shouldn't need to use this except on some special cases
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void UnRegisterEventCallback(AppHidEventCallback pHidEventCallback);
		//////////////////////////////////////////////////////////////////////////
		/// @details gets the controller's state
		/// @note should be used in the application's update
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED bool GamePadRefresh();
	}

	///@}

	namespace Connectivity
	{
		/** @name Internet connection
		*  The internet connection types are sorted by the "power" of the connection in an inverse order, NoConnection must be last.
		*/
		///@{
		//////////////////////////////////////////////////////////////////////////
		/// connection types
		//////////////////////////////////////////////////////////////////////////
		enum InternetConnectionType
		{
			EthernetConnection = 0,
			WirelessConnection,

			Mobile4GConnection,
			Mobile3GConnection,
			Mobile2GConnection,
			MobileConnection,

			LocalAccess,
			ConstrainedIAccess,

			UnknownConnection,
			NoConnection
		};

		//////////////////////////////////////////////////////////////////////////
		/// structure for possible internet connection types of the device
		//////////////////////////////////////////////////////////////////////////

		struct WINTK_EXPORTED InternetConnectionInfo
		{
			InternetConnectionType connectionType;
			bool isRoaming;

			std::string ToString();
		};

		//////////////////////////////////////////////////////////////////////////
		/// @return Returns the internet connection type (ethernet, wireless, mobile4g, mobile3g, mobile2g, mobile, unknown connection, no connection)
		//////////////////////////////////////////////////////////////////////////
		InternetConnectionInfo WINTK_EXPORTED GetInternetConnectionInfo();
		///@}

	}

	namespace Web
	{
		// Web 
		//////////////////////////////////////////////////////////////////////////
		/// @name Web
		/// @{
		/// @details Launches a web browser
		/// @param sURL The address to be loaded in the browser
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void LaunchBrowser(std::string sURL);

		namespace InGameBrowser
		{
			// InGameBrowser
			//////////////////////////////////////////////////////////////////////////
			/// @name InGameBrowser
			//////////////////////////////////////////////////////////////////////////
			/// @{
			//////////////////////////////////////////////////////////////////////////
			/// enum for setting user gender
			//////////////////////////////////////////////////////////////////////////
			enum UserGender
			{
				GENDER_UNKNOWN,
				GENDER_MALE,
				GENDER_FEMALE,
			};

			//////////////////////////////////////////////////////////////////////////
			/// structure for IGB initialization
			//////////////////////////////////////////////////////////////////////////
			struct InitParams
			{
				std::string gameCode;
				std::string gameVersion;
				std::string gameLanguage; //"EN", "FR", "DE", "IT", "SP", "JP", "KR", "CN", "BR", "RU", "TR", "AR", "TH", "ID", "VI", "ZT"
				std::string baseURL;
				std::string anonymousAccount;
				std::string clientID;
				std::string hdidfv;
				std::string xboxID;
				unsigned int userAge;

				WINTK_EXPORTED InitParams();
			};
			//////////////////////////////////////////////////////////////////////////
			/// @details Function to initialize IGB
			/// @param parameters The parameters used.
			/// @note Mandatory for IGB to function
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void Init(const InitParams& parameters);
			//////////////////////////////////////////////////////////////////////////
			/// @details Show the Customer Care page.
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void ShowCustomerCare();
			//////////////////////////////////////////////////////////////////////////
			/// @details Show the User Banned page.
			/// @param banType Type of ban.
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void ShowCustomerCareWithBANType(int banType);
			//////////////////////////////////////////////////////////////////////////
			/// @details Shows the News page.
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void ShowNews();
			//////////////////////////////////////////////////////////////////////////
			/// @details Show the Forum page.
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void ShowForum();
			//////////////////////////////////////////////////////////////////////////
			/// @details Shows the Terms Of Use page.
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void ShowTermsOfUse();
			//////////////////////////////////////////////////////////////////////////
			/// @details Shows the Privacy Policy page.
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void ShowPrivacyPolicy();
			//////////////////////////////////////////////////////////////////////////
			/// @details Shows the End User License Agreement page.
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void ShowEULA();
			//////////////////////////////////////////////////////////////////////////
			/// @details Shows or redirects to the Facebook Share page.
			/// @param openExternally If true then the link will be opened in an external browser, else in IGB
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void ShowFacebookShare(bool openExternally = true);
			//////////////////////////////////////////////////////////////////////////
			/// @details Shows or redirects to Facebook Page.
			/// @param openExternally If true then the link will be opened in an external browser, else in IGB
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void ShowFacebookPage(bool openExternally = false);
			//////////////////////////////////////////////////////////////////////////
			/// @details Shows IGB with the given URL.
			/// @param url The URL to show
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void OpenURL(const std::string& url);
			//////////////////////////////////////////////////////////////////////////
			/// @details Redirects to the Game Update page.
			/// @param unused Currently unused parameter 
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void LaunchBrowserGameUpdate(bool unused = true);
			//////////////////////////////////////////////////////////////////////////
			/// @details Redirects to the Game Review page.
			/// @param unused Currently unused parameter 
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void LaunchBrowserGameReview(bool unused = true);
			//////////////////////////////////////////////////////////////////////////
			/// @details Refresh the Unread News Number.
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void RefreshUnreadNewsNumber();
			//////////////////////////////////////////////////////////////////////////
			/// @details Get the Number of Unread News.
			/// @return The number of unread news
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED int GetUnreadNewsNumber();
			//////////////////////////////////////////////////////////////////////////
			/// @details Gets Facebook Share link.
			/// @param directLink Currently unused parameter
			/// @param facebookShareLinkCallback Callback with link as parameter
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void GetFacebookShareLink(bool directLink, void(*facebookShareLinkCallback)(const char*));
			//////////////////////////////////////////////////////////////////////////
			/// @details Sets IGB language.
			/// @param language The language IGB will use, it must be one of the following:
			/// "EN", "FR", "DE", "IT", "SP", "JP", "KR", "CN", "BR", "RU", "TR", "AR", "TH", "ID", "VI", "ZT"
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void SetGameLanguage(const std::string& language);
			//////////////////////////////////////////////////////////////////////////
			/// @details Sets the base URL.
			/// @param baseURL The URL
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void SetBaseURL(const std::string& baseURL);
			//////////////////////////////////////////////////////////////////////////
			/// @details Sets the user age.
			/// @param userAge The value of the user age
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void SetUserAge(unsigned int userAge);
			//////////////////////////////////////////////////////////////////////////
			/// @details Sets the user gender.
			/// @param gender The user's gender
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void SetUserGender(UserGender gender);
			//////////////////////////////////////////////////////////////////////////
			/// @details Sets the anonymous account.
			/// @param facebookAccount The value of the anonymous account
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void SetAnonymousAccount(const std::string& anonymousAccount);
			//////////////////////////////////////////////////////////////////////////
			/// @details Sets the Facebook Account ID.
			/// @param facebookAccount The value to the GLLive Account ID
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void SetFacebookID(const std::string& facebookID);
			//////////////////////////////////////////////////////////////////////////
			/// @details Sets the GLLive Account ID.
			/// @param facebookAccount The GLLive account IGB will use
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void SetGLLiveAccount(const std::string& glliveAccount);
			//////////////////////////////////////////////////////////////////////////
			/// @details Sets the XBox Account ID.
			/// @param xboxAccount The value to the XBox Account ID
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void SetXBoxAccount(const std::string& xboxAccount);
			//////////////////////////////////////////////////////////////////////////
			/// @details Returns true if the InGameBrowser is displayed on the screen
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED bool IsDisplayed();
			///@}
		}
		///@}
	}

	namespace SystemInfo
	{
		// System info
		//////////////////////////////////////////////////////////////////////////
		/// @name System info
		//////////////////////////////////////////////////////////////////////////
		///@{
		/// @return The name of the device.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetDeviceName();
		//////////////////////////////////////////////////////////////////////////
		/// @return Device firmware.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetDeviceFirmware();
		//////////////////////////////////////////////////////////////////////////
		/// @return Name of the device manufacturer.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetDeviceManufacturer();
		//////////////////////////////////////////////////////////////////////////
		/// @return Operating System's version of the device.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetOSVersion();
		//////////////////////////////////////////////////////////////////////////
		/// @return Device's total RAM in MB.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED float GetDeviceTotalMemory();
		//////////////////////////////////////////////////////////////////////////
		/// @details Kept for some backwards compatibility.
		/// @details You should not use it.
		/// @details It practically does: GetDeviceTotalMemory() - GetCurrentMemoryUsage()
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED float GetFreeRam();
		//////////////////////////////////////////////////////////////////////////
		/// @return Application's current memory usage in MB.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED float GetCurrentMemoryUsage();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns the maximum amount of memory that your application process can allocate in MB.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED int GetAppMemoryUsageLimit();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns the maximum amount of memory that your application used in MB.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED float GetPeakMemoryUsage();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns a value that indicates the application memory limit for the device.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED float GetMemoryWorkingLimit();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns a value that indicates the shared system memory.
		//////////////////////////////////////////////////////////////////////////
		/* returned value can get past the max unsigned int*/
		WINTK_EXPORTED unsigned long long GetSharedSystemMemory();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns a value that indicates the dedicated video memory.
		//////////////////////////////////////////////////////////////////////////
		/* returned value can get past the max unsigned int*/
		WINTK_EXPORTED unsigned long long GetDedicatedVideoMemory();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns a value that indicates the dedicated system memory.
		//////////////////////////////////////////////////////////////////////////
		/* returned value can get past the max unsigned int*/
		WINTK_EXPORTED unsigned long long GetDedicatedSystemMemory();
		//////////////////////////////////////////////////////////////////////////
		/// @return Free space of the device in MB.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED float GetFreeDiskSpace();
		//////////////////////////////////////////////////////////////////////////
		/// @return Processor infos.
		/// @note Not implemented on windows phone.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetProcessorDetails();
		//////////////////////////////////////////////////////////////////////////
		/// @return The number of logical processors.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED int GetNumberOfCpuCores();
		//////////////////////////////////////////////////////////////////////////
		/// @return Name of the graphic card's GPU.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetDeviceGPUName();
		//////////////////////////////////////////////////////////////////////////
		/// @return The name of the internet service provider.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::wstring GetDeviceCarrier();
		//////////////////////////////////////////////////////////////////////////
		/// @return Two letter code for the geographic region.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetDeviceCountry();
		//////////////////////////////////////////////////////////////////////////
		/// @return Language set for the device.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetDeviceLanguage();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns the feature level of directx.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetGraphicsFeatureLevel();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns true if the device has keyboard attached, otherwise false.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED bool HasKeyboardInput();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns true if the device has mouse attached, otherwise false.
		//////////////////////////////////////////////////////////////////////////	
		WINTK_EXPORTED bool HasMouseInput();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns true if the device has touch, otherwise false.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED bool	HasTouchInput();
#if defined(OS_WP8)
		//////////////////////////////////////////////////////////////////////////
		/// @details function used internally for coppa callback only on wp80
		//////////////////////////////////////////////////////////////////////////
		void CoppaCallback(std::string iso);
#endif
		//////////////////////////////////////////////////////////////////////////
		/// @details definition of the CoppaCountry callback function type
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED typedef void(*CoppaCountryCallback) (std::string iso);
		//////////////////////////////////////////////////////////////////////////
		/// Gets the ISO country code from the IP or from the device settings if the network call fails
		/// @param callback The callback function to be request when the call is complete
		/// @param hdidfv The game's HDIDFV to uniquely identify the device
		/// @return The callback is called with the ISO country code
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void	GetCoppaCountry(CoppaCountryCallback callback, std::string hdidfv);
		///@}
	}

	namespace ScreenUtils
	{
		// ScreenUtils
		//////////////////////////////////////////////////////////////////////////
		/// @name ScreenUtils
		//////////////////////////////////////////////////////////////////////////
		///@{
		/// @return Width of the screen.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED	int	GetWindowWidth();
		//////////////////////////////////////////////////////////////////////////
		/// @return Height of the screen.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED	int	GetWindowHeight();
		//////////////////////////////////////////////////////////////////////////
		/// Sets the width of the screen
		/// @param nWidth Width value of the resolution to set.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void SetWindowWidth(int nWidth);
		//////////////////////////////////////////////////////////////////////////
		/// Sets the height of the screen
		/// @param nHeight Height value of the resolution to set.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void	SetWindowHeight(int nHeight);
		//////////////////////////////////////////////////////////////////////////
		/// @param bSleep If bSleep is true the phone will be set to sleep mode.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void SetScreenSleepMode(bool bSleep);
		//////////////////////////////////////////////////////////////////////////
		/// @return True if the phone is in sleep mode, otherwise false.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED bool IsScreenSleepModeOn();
		//////////////////////////////////////////////////////////////////////////
		/// @return True if the application is fullscreen, otherwise false.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED bool IsFullScreen();
		///@}
	}

	namespace Identifiers
	{
		//IDs
		//////////////////////////////////////////////////////////////////////////
		/// @name IDs
		//////////////////////////////////////////////////////////////////////////
		///@{
		/// @return Returns the HDIDFV or generates one and returns it
		/// NOT TESTED, DO NOT USE IT YET
		//////////////////////////////////////////////////////////////////////////
		//WINTK_EXPORTED std::string GetCurrentHDIDFV(char* GameKey);
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns the advertising id
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetAdvertisingID();
		//////////////////////////////////////////////////////////////////////////
		/// @return Gets the hardware ID for windows 8
		/// @note Implementation is only for windows 8
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetHardwareID();
		//////////////////////////////////////////////////////////////////////////
		/// @return Gets the Publisher Host ID for windows phone 8
		/// @note Implementation is only for windows phone 8
		/// @note Check the ID_CAP_IDENTITY_DEVICE option from Capabilities in the WMAppManifest.xml
		//////////////////////////////////////////////////////////////////////////
		/* check the ID_CAP_IDENTITY_DEVICE option from Capabilities in the WMAppManifest.xml */
		WINTK_EXPORTED std::string GetPublisherHostID();
		////////////////////////////////////////////////////////////////////////////
		///// @return IDs from custom.data file from OEM
		///// @param sIDstring 
		///// @note For testing the function reads from a qa_custom.data file from app folder
		////////////////////////////////////////////////////////////////////////////
		//WINTK_EXPORTED std::string GetCustomDataID(std::string sIDstring);
		///@}
	}

	namespace LiveTiles
	{
		/*Live Tiles*/
		//////////////////////////////////////////////////////////////////////////
		/// @name LiveTiles
		//////////////////////////////////////////////////////////////////////////
		///@{
		//////////////////////////////////////////////////////////////////////////
		/// None - nothing will be over tile \n
		/// Logo - logo will be in the left corner of the tile (Not supported on WP8) \n
		/// Title - Title will be over livetile \n
		//////////////////////////////////////////////////////////////////////////
		enum TileBranding
		{
			None = 0,
			Logo,
			Title
		};

		//////////////////////////////////////////////////////////////////////////
		/// @param path - relative path to install folder ex: \\Assests\\Tiles
		/// @param language - language code ex: EN
		/// @param branding - overlay of the tile - logo/title/none
		/// @note name of images form tile folder should be like \n
		/// 1_largetile.png \n
		/// 1_mediumtile.png \n
		///	1_smalltile.png  \n
		///	1_widetile.png \n
		///	2_largetile.png \n
		/// 2_mediumtile.png \n
		///	2_smalltile.png \n
		///	2_widetile.png \n
		///	@details the function will merge automatically images from default folder (ex: \\Assests\\Tiles\\default) with tile from language directory specified in language param and load them for live tiles. 
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void LoadTilesFromPath(const std::wstring & path, const std::wstring & language, TileBranding branding = None);
		//////////////////////////////////////////////////////////////////////////
		/// @description - removes Live Tiles
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void RemoveLiveTiles();
		///@} 
	}

	namespace Sensors
	{
		//sensors
		//////////////////////////////////////////////////////////////////////////
		/// @name Sensors
		//////////////////////////////////////////////////////////////////////////

		namespace Gyrometer
		{
			///@{
			/// @param nFreq the report interval for Gyrometer
			/// @note For WP8, check the ID_CAP_SENSORS option from Capabilities in the WMAppManifest.xml
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void Start(unsigned int nFreq);
			//////////////////////////////////////////////////////////////////////////
			/// @details sets the report interval to 0 for Gyrometer
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void Stop();
			//////////////////////////////////////////////////////////////////////////
			/// @param x will have the value for the angular velocity on x axis
			/// @param y will have the value for the angular velocity on y axis
			/// @param z will have the value for the angular velocity on z axis
			/// @return false if Gyrometer was not initialized or the report interval is 0, otherwise true
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED bool GetReading(float& x, float& y, float& z);

			///@}
		}

		namespace Accelerometer
		{
			///@{
			//////////////////////////////////////////////////////////////////////////
			/// @param nFreq the report interval for Accelerometer
			/// @note Check the ID_CAP_SENSORS option from Capabilities in the WMAppManifest.xml
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void Start(unsigned int fFreq);
			//////////////////////////////////////////////////////////////////////////
			/// @details sets the report interval to 0 for Accelerometer
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void Stop();
			//////////////////////////////////////////////////////////////////////////
			/// @param x will have the value for the acceleration on x axis
			/// @param y will have the value for the acceleration on y axis
			/// @param z will have the value for the acceleration on z axis
			/// @return false if Accelerometer was not initialized or the report interval is 0, otherwise true
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED bool GetReading(float& x, float& y, float& z);
			///@}
		}

#if defined(OS_W8)
		namespace Geolocator
		{
			///@{
			//////////////////////////////////////////////////////////////////////////
			/// enum for the Geolocation Status
			//////////////////////////////////////////////////////////////////////////

			enum GeolocationStatus
			{
				Ready = 0,
				Initializing,
				NoData,
				Disabled,
				NotInitialized,
				NotAvailable,
			};

			//////////////////////////////////////////////////////////////////////////
			/// enum for the Geolocation Source
			//////////////////////////////////////////////////////////////////////////
			enum GeolocationSource
			{
				Cellular = 0,
				Satellite,
				WiFi,
				IPAddress,
				Unknown,
			};
			//////////////////////////////////////////////////////////////////////////
			/// @details starts the geolocator and sets the report interval
			/// @note For W8.1 geolocation, make sure that the location is enabled option from Capabilities in the Package.appxmanifest
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void Start(unsigned int ReportInterval);
			//////////////////////////////////////////////////////////////////////////
			/// @details stops the geolocator
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void Stop();
			//////////////////////////////////////////////////////////////////////////
			/// @return gets the geolocator status
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED GeolocationStatus GetStatus();
			//////////////////////////////////////////////////////////////////////////
			/// @return gets the geolocator source
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED GeolocationSource GetSource();
			//////////////////////////////////////////////////////////////////////////
			/// @return gets whether the geolocator has returned valid values at least once
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED bool HasValidValues();
			//////////////////////////////////////////////////////////////////////////
			/// @details gets the geolocator latitude, longitude and altitude
			/// @param latitude will have the value for the current latitude
			/// @param longitude will have the value for the current longitude
			/// @param altitude will have the value for the current altitude
			/// @param accuracy will have the value for the current accuracy in metres
			/// @return false if Geolocator was not initialized or the report interval is 0, otherwise true
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED bool GetLocation(float& latitude, float& longitude, float& altitude, float& accuracy);
			///@}
		}
#endif

	}

	namespace TrueFalse
	{
		// hacking
		//////////////////////////////////////////////////////////////////////////
		/// @name Antihacking
		//////////////////////////////////////////////////////////////////////////
		///@{
		/// @return Returns true if the check for WMAppPRHeader.xml fails
		/// @note Implementation is only for windows phone 8.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED bool TrueFalseBool();
		//////////////////////////////////////////////////////////////////////////
		/// @details A comprehensive explaining of the function is in the following link:
		/// <a href="https://docs.gameloft.org/anti-hack-verification-tool-for-w8-wp8-2/">Anti-Hack verification</a>
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::wstring TrueFalseString();
		///@}
	}

	namespace Storage
	{
		// Storage
		//////////////////////////////////////////////////////////////////////////
		/// @name Storage
		//////////////////////////////////////////////////////////////////////////
		///@{
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns the root folder in the roaming app data store.
		/// @note Implementation is only for windows 8.1.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED const std::wstring GetAppRoamingFolderPath();
		//////////////////////////////////////////////////////////////////////////
		/// @return Returns the root folder in the installed app data store.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED const std::wstring GetAppInstalledFolderPath();
		/// @details Returns the root folder in the local app data store.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED const std::wstring GetAppLocalFolderPath();
		//////////////////////////////////////////////////////////////////////////
		/// @details Deletes the file whose name is specified in filename.
		/// @param sFilename C string containing the name of the file to be deleted.
		/// @return If the file is successfully deleted, a zero value is returned.
		/// @return On failure, a nonzero value is returned.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED int RemoveFile(std::wstring sFilename);
		//////////////////////////////////////////////////////////////////////////
		/// @details Changes the name of the file specified by filename1 to filename2.
		/// @param sFilename1 C string containing the name of an existing file to be renamed and/or moved.
		/// @param sFilename2 C string containing the new name for the file.
		/// @return If the file is successfully renamed, a zero value is returned.
		/// @return On failure, a nonzero value is returned.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED int RenameFile(std::wstring sFilename1, std::wstring sFilename2);
		//////////////////////////////////////////////////////////////////////////
		/// @details creates a handle to a file
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED FILE* OpenFile(const std::wstring& sFilename, const std::wstring& sMode);
		//////////////////////////////////////////////////////////////////////////
		/// @details closes the handle to an opened file
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED int CloseFile(FILE* file);
		//////////////////////////////////////////////////////////////////////////
		/// @details check if a directory exists
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED bool DirectoryExists(const std::wstring & path);
		//////////////////////////////////////////////////////////////////////////
		/// @param dir - path to directory
		/// @details - returns list of names from directory @dir
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::vector<std::wstring> GetFileNamesFromDirectory(const std::wstring & dir);

		///@}
	}

	namespace OnlinePushNotifications
	{
		// OnlinePushNotifications
		//////////////////////////////////////////////////////////////////////////
		/// @name OnlinePushNotifications
		//////////////////////////////////////////////////////////////////////////
		///@{
		//////////////////////////////////////////////////////////////////////////
		/// @details Initializes the Online Notification Channel. For Windows
		/// Desktop also sets up the Badge and Tile updaters.
		/// If the initialization of the Channel fails then the callback,
		/// if set, will be triggered with the error message: 
		/// "Invalid Push Notifications Channel! Check Internet Connection! Recall Init()!".
		/// The user, at this point, should call this function again and check if a
		/// valid endpoint is returned by 'GetEndpoint'.
		/// Recommended to be called at each Start or Resume of the application
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void Init();
		//////////////////////////////////////////////////////////////////////////
		/// @details The endpoint should be registered by the game to the
		/// Hermes server / Gameloft Online Services
		/// Use this function after a call to Init() to check if
		/// the channel was created correctly. If the channel is not valid
		/// it will return an empty string.
		/// @return Returns the endpoint used to send Push Notifications to 
		/// this device. 
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string GetEndpoint();
		//////////////////////////////////////////////////////////////////////////
		/// @details Structure used for passing the data from the push
		/// notification to the callback.
		/// @note On Windows Phone, the third string, 'text3', will always
		/// be empty. This is used for having the same callback format for 
		/// both Windows Desktop and Windows Phone.
		//////////////////////////////////////////////////////////////////////////
		struct NotificationData
		{
			std::wstring				text1;
			std::wstring				text2;
			std::wstring				text3;
			std::wstring				launchParameter;
		};
		//////////////////////////////////////////////////////////////////////////
		/// @details The format of the Callback function
		/// @note The function that will be used as the callback with this format
		/// will have to handle the launchParameter string that will contain most
		/// of the important data. This data can contain , for example, the
		/// details that make up an invitation to a multiplayer game.
		/// The Callback will also be used to inform if the Init() function
		/// failed to create a valid Notification Channel
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED typedef bool(*ReceivedCallback) (NotificationData & pushNotificationContext);
		//////////////////////////////////////////////////////////////////////////
		/// @details Sets the Callback function (implemented by each game) that is
		/// called when receiving online Push Notifications or to inform if the
		/// Init() function did not sucesfully create the Notification Channel
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void RegisterReceivedCallback(ReceivedCallback cb);
		//////////////////////////////////////////////////////////////////////////
		/// @details resets the callback function to null
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void UnregisterReceivedCallback();
		//////////////////////////////////////////////////////////////////////////
		/// @details Closes the notification channel
		/// After a call to CloseChannel the endpoint that was previously  
		/// generated will be invalid. Any Push Notifications sent to it will
		/// not be delivered by the server.
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void CloseChannel();
		///@}
	}

	namespace LocalToastNotifications
	{
		// LocalToastNotifications
		//////////////////////////////////////////////////////////////////////////
		/// @name LocalToastNotifications
		//////////////////////////////////////////////////////////////////////////
		///@{
		//////////////////////////////////////////////////////////////////////////
		/// @details Shows a local toast notification with title,body text and/or image that can be delayed.
		/// @details On WP8 the system will check every ~30 minutes for notifications (on debug every ~1 min), so is not accurate. 
		/// @param titleText C string containing the title of notification.
		/// @param bodytext C string containing the body text of notification. 
		/// @param delay C int containing number of seconds that will delay the notification. 
		/// @param imagePath C string relative image path with image name for notification. empty if you don`t want an custom image.  
		/// @return id of the notification if the notification is delayed otherwise returns 0. 
		/// @note on Windows Phone imagePath is not used
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED int ShowToastNotification(const std::wstring & titleText, const std::wstring & bodytext, const int & delay, const std::wstring & imagePath = L"");
		//////////////////////////////////////////////////////////////////////////
		/// @details Remove a delayed notification by id or all notifications.
		/// @param id of the delayed notification. If id is -1 all delayed notifications will be deleted. 
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void ClearToastNotificationsById(int id);
		///@)
	}
}
///@}
#endif // __WINTK_SHARED_API_H
