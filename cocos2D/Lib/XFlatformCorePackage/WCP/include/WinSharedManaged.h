#ifndef __WINTK_SHARED_MANAGED_API_H
#define __WINTK_SHARED_MANAGED_API_H

#include "WinShared.h"

#if defined(WCP_DLL)
#define WINTK_EXPORTED __declspec(dllexport)
#else
#define WINTK_EXPORTED __declspec(dllimport)
#endif
//#define WINTK_IMPORTED 

/** @name WCPToolkit
 *  windows toolkit utility functions 
 */
///@{
namespace WCPToolkit
{

	namespace Utils
	{
		// Utils
		//////////////////////////////////////////////////////////////////////////
		/// @name Utils
		//////////////////////////////////////////////////////////////////////////
		///@{
		/// @details Platform string to wide string conversion
		/// @return returns the converted wide string
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::wstring PlatformStr2Wstr(Platform::String^ str);
		//////////////////////////////////////////////////////////////////////////
		/// @details wide string to Platform string conversion
		/// @return returns the converted Platform string
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED Platform::String^ Wstr2PlatformStr(std::wstring wstr);
		//////////////////////////////////////////////////////////////////////////
		/// @details Platform string to string UTF8 conversion
		/// @return returns the converted string
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED std::string PlatformStr2Str(Platform::String^ str);
		//////////////////////////////////////////////////////////////////////////
		/// @details string to Platform string conversion
		/// @return returns the converted Platform string
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED Platform::String^ Str2PlatformStr(std::string str);
		//////////////////////////////////////////////////////////////////////////
		/// @details sets the dispatcher for the UI thread
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void SetCoreDispatcher(Windows::UI::Core::CoreDispatcher^ dispatcher);

#if defined(OS_W8) || defined(OS_WP81) || defined(OS_W10)
		//////////////////////////////////////////////////////////////////////////
		/// @return returns the Panel of the application
		/// @note This is not available on windows phone 8.0
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED Windows::UI::Xaml::Controls::Panel^ GetParentPanel();
		//////////////////////////////////////////////////////////////////////////
		/// @details sets the Panel of the application which will be used internally by WCP
		/// @note This is not available on windows phone 8.0 
		//////////////////////////////////////////////////////////////////////////
		WINTK_EXPORTED void SetParentPanel(Windows::UI::Xaml::Controls::Panel^ pPanel);
#else
#endif

		///@}
	}

	namespace Web
	{
		// Web
		//////////////////////////////////////////////////////////////////////////
		/// @name Web
		//////////////////////////////////////////////////////////////////////////
		///@{
		namespace InGameBrowser
		{
			// InGameBrowser
			//////////////////////////////////////////////////////////////////////////
			/// @name InGameBrowser
			//////////////////////////////////////////////////////////////////////////
			///@{
#if defined(OS_W8) || defined(OS_WP81) || defined(OS_W10)
			//////////////////////////////////////////////////////////////////////////
			/// @details setting a ref to the application's panel
			/// @note not usable for WP80
			//////////////////////////////////////////////////////////////////////////
			WINTK_EXPORTED void SetParentPanel(Windows::UI::Xaml::Controls::Panel^ panel);
#endif
			///@}
		}
		///@}
	}
}
///@}
#endif // __WINTK_SHARED_MANAGED_API_H
